// DEPRECATED: please don't use this component. From now on, we will only use
// the `Button` component (from `js/components/common/button`) as it covers
// all possible cases.

@use "scss/_colors";
@use "scss/sizes";
@use "sass:color";

/*
  This is a simple colored button.

  The default color is gray, other available are:
  - blue
  - red
  - storm
  - teal
  - whitegray

  Other modifiers:
  - fullwidth
  - pending
  - small

  NOTE: Please __do not @extend__ this component. If possible use
  `bem.KoboButton` or raw class names.

  NOTE: Our current go-to button solution (`_mdl.buttons.scss`) turned out to be
  chaotic-neutral and hard to maintain, so we should transition here all buttons
  that use: `.mdl-button.mdl-button--colored.mdl-button--raised`.
*/

.kobo-button {
  display: inline-block;
  vertical-align: middle;
  position: relative; // needed for tooltips etc.
  cursor: pointer;
  font-size: sizes.$x14;
  font-weight: 600;
  text-transform: uppercase;
  text-decoration: none;
  text-align: center;
  border-radius: sizes.$x6;
  color: colors.$kobo-white;
  background-color: colors.$kobo-gray-40;
  box-shadow: 0 sizes.$x2 sizes.$x4 0 rgba(0, 0, 0, 0.25);
  height: auto;
  min-height: sizes.$x40;
  line-height: sizes.$x30;
  padding: sizes.$x5 sizes.$x30;
  margin: 0;
  border: none;

  &[disabled] {
    pointer-events: none;
    color: rgba(colors.$kobo-white, 0.75);
    // 1px black transparent png with 10% opacity (png-pixel.com)
    // We have it so it works with every `background-color` we use.
    background-image: url("data:image/png;base64,  iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkkAQAAB8AG7jymN8AAAAASUVORK5CYII= ");
  }

  &:hover {
    // 1px black transparent png with 6% opacity (png-pixel.com)
    // We have it so it works with every `background-color` we use.
    background-image: url("data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNk4AcAABUAET9MVpIAAAAASUVORK5CYII=");
  }

  &:active {
    // makes the shadow smaller and moves button down by small bit
    // to make it look pressed-in
    transform: translateY(sizes.$x1);
    box-shadow: 0 #{sizes.$x2 - 1px} #{sizes.$x4 - 1px} 0 rgba(0, 0, 0, 0.25);
  }

  // icon inside button
  i,
  .k-icon {
    vertical-align: top;
    font-size: sizes.$x21;
  }

  &.kobo-button--small {
    line-height: sizes.$x20;
    min-height: sizes.$x30;
    padding: sizes.$x5 sizes.$x16;

    i,
    .k-icon {
      font-size: sizes.$x14;
    }

    &.kobo-button--pending .k-icon.k-icon-spinner.k-spin {
      top: calc(50% - 11px);
      left: calc(50% - 6px);
    }
  }

  &.kobo-button--fullwidth {
    display: block;
    width: 100%;
  }

  &.kobo-button--blue {
    background-color: colors.$kobo-blue;
  }

  &.kobo-button--storm {
    background-color: colors.$kobo-storm;
  }

  &.kobo-button--red {
    background-color: colors.$kobo-red;
  }

  &.kobo-button--teal {
    background-color: colors.$kobo-teal;
  }

  &.kobo-button--whitegray {
    color: colors.$kobo-gray-24;
    background-color: colors.$kobo-gray-96;

    &[disabled] {
      color: rgba(colors.$kobo-gray-24, 0.75);
    }

    &.kobo-button--pending .k-icon.k-icon-spinner.k-spin {
      color: colors.$kobo-gray-24;
    }
  }

  // NOTE: this requires `<i className='k-spin k-icon k-icon-spinner'/>` to be
  // put inside the button
  &.kobo-button--pending {
    // hide button text
    color: transparent;
    position: relative;

    .k-icon.k-icon-spinner.k-spin {
      color: colors.$kobo-white;
      display: block;
      position: absolute;
      top: calc(50% - 15px);
      left: calc(50% - 8px);
    }
  }
}
